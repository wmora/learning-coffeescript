// Generated by CoffeeScript 1.6.1

/*
Most of the loops you'll write in CoffeeScript will be comprehensions over arrays, objects, and ranges. 
Comprehensions replace (and compile into) for loops, with optional guard clauses and the value of the
current array index. 
Unlike for loops, array comprehensions are expressions, and can be returned and assigned.
*/


(function() {
  var countdown, courses, dish, eat, food, foods, i, key, menu, num, student, value, _i, _j, _k, _len, _len1, _len2, _ref;

  eat = function(what) {
    return console.log("eat " + what);
  };

  _ref = ["toast", "cheese", "wine"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    food = _ref[_i];
    eat(food);
  }

  menu = function(index, what) {
    return console.log("" + index + " - " + what);
  };

  courses = ["greens", "caviar", "truffles", "roast", "cake"];

  for (i = _j = 0, _len1 = courses.length; _j < _len1; i = ++_j) {
    dish = courses[i];
    menu(i + 1, dish);
  }

  foods = ["broccoli", "spinach", "chocolate"];

  for (_k = 0, _len2 = foods.length; _k < _len2; _k++) {
    food = foods[_k];
    if (food !== "chocolate") {
      eat(food);
    }
  }

  countdown = (function() {
    var _l, _results;
    _results = [];
    for (num = _l = 10; _l >= 1; num = --_l) {
      _results.push(num);
    }
    return _results;
  })();

  console.log(countdown);

  /*
  Comprehensions can also be used to iterate over the keys and values in an object. 
  Use --- of --- to signal comprehension over the properties of an object instead
  of the values of an array
  */


  student = {
    firstName: "Frodo",
    lastName: "Baggins",
    age: 55
  };

  for (key in student) {
    value = student[key];
    console.log("" + key + " is " + value);
  }

}).call(this);
